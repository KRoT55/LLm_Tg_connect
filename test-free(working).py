import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
import stripe
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import sqlite3
import json
import logging
from cryptography.fernet import Fernet  # –î–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
import requests
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º–æ–¥–∑–∏ –≤ –ª–æ–≥–∞—Ö (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)
class EmojiFilter(logging.Filter):
    def filter(self, record):
        if hasattr(record, 'msg'):
            try:
                # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏, –æ—Å—Ç–∞–≤–ª—è—è –∫–∏—Ä–∏–ª–ª–∏—Ü—É
                record.msg = re.sub(r'[^\w\s,.!?–∞-—è–ê-–Ø]', '', str(record.msg))
            except:
                pass
        return True

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –∫ StreamHandler (—á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä—Ç–∏—Ç—å —Ñ–∞–π–ª–æ–≤—ã–µ –ª–æ–≥–∏)
for handler in logger.handlers:
    if isinstance(handler, logging.StreamHandler):
        handler.addFilter(EmojiFilter())

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('API_TOKEN')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
ENCRYPTION_KEY = os.getenv('ENCRYPTION_KEY')  # –ö–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
PAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')
PAYPAL_SECRET = os.getenv('PAYPAL_SECRET')
NOWPAYMENTS_API_KEY = os.getenv('NOWPAYMENTS_API_KEY')
HUGGINGFACE_API_KEY = os.getenv('HUGGINGFACE_API_KEY')  # –î–ª—è Hugging Face API
OLLAMA_HOST = os.getenv('OLLAMA_HOST', 'http://localhost:11434')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é localhost
GOOGLE_AI_API_KEY = os.getenv('GOOGLE_AI_API_KEY')  # –î–ª—è Gemini API

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stripe
stripe.api_key = STRIPE_SECRET_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
cipher_suite = Fernet(ENCRYPTION_KEY.encode())

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò
system_prompt = """
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. 

1. –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
   - –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
   - –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ª–æ–≥–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ (–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ).
   - –ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ Markdown, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –∏–ª–∏ –∞–±–∑–∞—Ü—ã.

2. –°–û–î–ï–†–ñ–ê–ù–ò–ï –û–¢–í–ï–¢–ê:
   - –î–∞–≤–∞–π –ø—Ä–∏–º–µ—Ä—ã, —Ä–∞–∑–±–æ—Ä—ã, –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
   - –£–ø–æ–º–∏–Ω–∞–π –≤–∞–∂–Ω—ã–µ –Ω—é–∞–Ω—Å—ã –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏.
   - –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ —Ñ–∞–∫—Ç—ã.

3. –°–¢–ò–õ–¨:
   - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ üòä, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –∂–∏–≤—ã–º –∏ –Ω–∞–≥–ª—è–¥–Ω—ã–º.
   - –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.
   - –ò–∑–±–µ–≥–∞–π –∏–∑–ª–∏—à–Ω–µ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.

4. –ü–†–ò–ú–ï–† –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê:
   - –ó–ê–ì–û–õ–û–í–û–ö: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã.
   - –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.
   - –ü–†–ò–ú–ï–†–´: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–ª–∏ –∫–µ–π—Å—ã.
   - –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: –°–æ–≤–µ—Ç—ã –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
   - –í–ê–ñ–ù–´–ï –ù–Æ–ê–ù–°–´: –ß—Ç–æ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å.

5. –ï–°–õ–ò –ù–£–ñ–ù–û –ü–†–ï–î–°–¢–ê–í–ò–¢–¨ –î–ê–ù–ù–´–ï –í –¢–ê–ë–õ–ò–¶–ï:
   - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏.
   - –ù–∞–ø—Ä–∏–º–µ—Ä:
     - –ö–∞—Ç–µ–≥–æ—Ä–∏—è 1: –û–ø–∏—Å–∞–Ω–∏–µ.
     - –ö–∞—Ç–µ–≥–æ—Ä–∏—è 2: –û–ø–∏—Å–∞–Ω–∏–µ.
     - –ö–∞—Ç–µ–≥–æ—Ä–∏—è 3: –û–ø–∏—Å–∞–Ω–∏–µ.

6. –≠–ú–û–î–ó–ò:
   - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, –Ω–æ –Ω–µ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤—É–π.
   - –ü—Ä–∏–º–µ—Ä: üìä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, ‚ö†Ô∏è –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, ‚úÖ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

7. –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
   - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º.
   - –ò–∑–±–µ–≥–∞–π –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
   - –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö, –ø–æ—ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º.
"""

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class UserDatabase:
    def __init__(self, db_name='users.db'):
        self.db_name = db_name
        self.create_db()

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
    def create_db(self):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY, 
                    requests INTEGER, 
                    paid BOOLEAN,
                    chat_history TEXT,  -- –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
                    last_request_time TEXT,  -- –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    selected_model TEXT DEFAULT "llama"  -- –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                )
            ''')
            conn.commit()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")

    # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    def encrypt_data(self, data):
        return cipher_suite.encrypt(data.encode()).decode()

    # –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    def decrypt_data(self, data):
        return cipher_suite.decrypt(data.encode()).decode()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    def user_exists(self, user_id):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT 1 FROM users WHERE user_id = ?', (user_id,))
            return cursor.fetchone() is not None

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    def create_user(self, user_id):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO users (user_id, requests, paid, chat_history, last_request_time, selected_model) VALUES (?, ?, ?, ?, ?, ?)',
                (user_id, 0, False, self.encrypt_data(json.dumps([])), datetime.now().isoformat(), "llama"))
            conn.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–Ω.")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def get_user_requests(self, user_id):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT requests FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return result[0] if result else 0

    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def increment_user_requests(self, user_id):
        requests = self.get_user_requests(user_id) + 1
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET requests = ?, last_request_time = ? WHERE user_id = ?',
                           (requests, datetime.now().isoformat(), user_id))
            conn.commit()
            logger.info(f"–ó–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–≤–µ–ª–∏—á–µ–Ω—ã –¥–æ {requests}.")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
    def check_payment(self, user_id):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT paid FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return result[0] if result else False

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
    def update_payment_status(self, user_id, paid):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET paid = ? WHERE user_id = ?', (paid, user_id))
            conn.commit()
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {paid}.")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def get_chat_history(self, user_id):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT chat_history FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            if result:
                return json.loads(self.decrypt_data(result[0]))
            return []

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def update_chat_history(self, user_id, chat_history):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET chat_history = ? WHERE user_id = ?',
                           (self.encrypt_data(json.dumps(chat_history)), user_id))
            conn.commit()
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    def get_last_request_time(self, user_id):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT last_request_time FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return datetime.fromisoformat(result[0]) if result else datetime.now()

    # –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
    def reset_requests_if_needed(self, user_id):
        last_request_time = self.get_last_request_time(user_id)
        if datetime.now() - last_request_time > timedelta(days=1):
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE users SET requests = 0 WHERE user_id = ?', (user_id,))
                conn.commit()
                logger.info(f"–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω.")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    def get_selected_model(self, user_id):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT selected_model FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return result[0] if result else "llama"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    def update_selected_model(self, user_id, model):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET selected_model = ? WHERE user_id = ?', (model, user_id))
            conn.commit()
            logger.info(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {model}.")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = UserDatabase()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ LLM API

# 1. Ollama - –ª–æ–∫–∞–ª—å–Ω—ã–π API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥–µ–ª–µ–π (llama, mistral –∏ –¥—Ä.)
async def ollama_chat(messages, model="llama2"):
    try:
        response = requests.post(
            f"{OLLAMA_HOST}/api/chat",
            headers={"Content-Type": "application/json"},
            json={"model": model, "messages": messages},
            stream=True  # –í–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º
        )

        if response.status_code == 200:
            full_response = ""
            for line in response.iter_lines():
                if line:
                    try:
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏ –ø–∞—Ä—Å–∏–º JSON
                        json_data = json.loads(line.decode('utf-8'))
                        if "message" in json_data and "content" in json_data["message"]:
                            full_response += json_data["message"]["content"]
                    except json.JSONDecodeError:
                        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {line}")
                        continue

            if full_response:
                return full_response
            else:
                return "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Ollama API: {response.status_code}, {response.text}")
            return f"–û—à–∏–±–∫–∞ Ollama API: {response.status_code}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama: {str(e)}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"


# 2. Hugging Face API - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
async def huggingface_chat(messages, model="mistralai/Mistral-7B-Instruct-v0.2"):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π Hugging Face
        prompt = ""
        for msg in messages:
            if msg["role"] == "system":
                prompt += f"<s>System: {msg['content']}\n"
            elif msg["role"] == "user":
                prompt += f"User: {msg['content']}\n"
            elif msg["role"] == "assistant":
                prompt += f"Assistant: {msg['content']}\n"

        prompt += "Assistant: "

        response = requests.post(
            f"https://api-inference.huggingface.co/models/{model}",
            headers={
                "Authorization": f"Bearer {HUGGINGFACE_API_KEY}",
                "Content-Type": "application/json"
            },
            json={"inputs": prompt, "parameters": {"max_new_tokens": 500}},
            stream=True  # –í–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º
        )

        if response.status_code == 200:
            full_response = ""
            for line in response.iter_lines():
                if line:
                    try:
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏ –ø–∞—Ä—Å–∏–º JSON
                        json_data = json.loads(line.decode('utf-8'))
                        if isinstance(json_data, list) and len(json_data) > 0:
                            full_response += json_data[0]["generated_text"].split("Assistant: ")[-1]
                    except json.JSONDecodeError:
                        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {line}")
                        continue

            if full_response:
                return full_response
            else:
                return "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Hugging Face API: {response.status_code}, {response.text}")
            return f"–û—à–∏–±–∫–∞ Hugging Face API: {response.status_code}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Hugging Face: {str(e)}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"


# 3. Google Gemini API (—Ä–∞–Ω–µ–µ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è PaLM)
async def gemini_chat(messages):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Gemini API
        prompt = ""
        for msg in messages:
            if msg["role"] == "system":
                prompt += f"System: {msg['content']}\n\n"
            elif msg["role"] == "user":
                prompt += f"User: {msg['content']}\n\n"
            elif msg["role"] == "assistant":
                prompt += f"Assistant: {msg['content']}\n\n"

        response = requests.post(
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
            headers={"Content-Type": "application/json"},
            params={"key": GOOGLE_AI_API_KEY},
            json={
                "contents": [{"parts": [{"text": prompt}]}],
                "generationConfig": {
                    "temperature": 0.7,
                    "topK": 40,
                    "topP": 0.95,
                    "maxOutputTokens": 1024
                }
            },
            stream=True  # –í–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º
        )

        if response.status_code == 200:
            # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            full_response = ""
            for line in response.iter_lines():
                if line:
                    full_response += line.decode('utf-8')

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤–µ—Å—å –æ—Ç–≤–µ—Ç —Å–æ–±—Ä–∞–Ω
            try:
                json_data = json.loads(full_response)
                if 'candidates' in json_data and len(json_data['candidates']) > 0:
                    return json_data['candidates'][0]['content']['parts'][0]['text']
                return "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
            except json.JSONDecodeError:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {full_response[:200]}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Gemini API: {response.status_code}, {response.text}")
            return f"–û—à–∏–±–∫–∞ Gemini API: {response.status_code}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini: {str(e)}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def chat_with_model(messages, model="llama"):
    try:
        if model == "llama":
            return await ollama_chat(messages, "llama2")
        elif model == "mistral":
            try:
                return await ollama_chat(messages, "mistral")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é Mistral: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É–µ–º Llama 2 –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –º–æ–¥–µ–ª—å.")
                return await ollama_chat(messages, "llama2")
        elif model == "huggingface":
            try:
                return await huggingface_chat(messages)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å Hugging Face: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É–µ–º Llama 2 –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –º–æ–¥–µ–ª—å.")
                return await ollama_chat(messages, "llama2")
        elif model == "gemini":
            try:
                return await gemini_chat(messages)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å Gemini: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É–µ–º Llama 2 –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –º–æ–¥–µ–ª—å.")
                return await ollama_chat(messages, "llama2")
        else:
            return await ollama_chat(messages, "llama2")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏: {str(e)}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Apple Pay/Google Pay
def create_payment_intent():
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        intent = stripe.PaymentIntent.create(
            amount=1000,  # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ü–µ–Ω—Ç–∞—Ö, 1000 = $10
            currency="usd",
            payment_method_types=["card", "apple_pay", "google_pay"],
        )
        logger.info("–ü–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω.")
        return intent.client_secret
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        return None


# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ PayPal
def create_paypal_payment():
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ PayPal
        auth_response = requests.post(
            "https://api.paypal.com/v1/oauth2/token",
            headers={"Accept": "application/json", "Accept-Language": "en_US"},
            auth=(PAYPAL_CLIENT_ID, PAYPAL_SECRET),
            data={"grant_type": "client_credentials"}
        )
        access_token = auth_response.json()["access_token"]

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_response = requests.post(
            "https://api.paypal.com/v1/payments/payment",
            headers={
                "Content-Type": "application/json",
                "Authorization": f"Bearer {access_token}"
            },
            json={
                "intent": "sale",
                "payer": {"payment_method": "paypal"},
                "transactions": [{
                    "amount": {"total": "10.00", "currency": "USD"},
                    "description": "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"
                }],
                "redirect_urls": {
                    "return_url": "https://example.com/success",
                    "cancel_url": "https://example.com/cancel"
                }
            }
        )
        return payment_response.json()["links"][1]["href"]  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ PayPal: {str(e)}")
        return None


# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ NowPayments (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞)
def create_nowpayments_invoice():
    try:
        response = requests.post(
            "https://api.nowpayments.io/v1/invoice",
            headers={"x-api-key": NOWPAYMENTS_API_KEY},
            json={
                "price_amount": 10,
                "price_currency": "usd",
                "order_id": "subscription_123",
                "order_description": "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
                "ipn_callback_url": "https://example.com/callback",
                "success_url": "https://example.com/success",
                "cancel_url": "https://example.com/cancel"
            }
        )
        return response.json()["invoice_url"]  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ NowPayments: {str(e)}")
        return None


# –ß–∞—Ç —Å –º–æ–¥–µ–ª—å—é
async def chat_with_ai(message: Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª: {message.text}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if not db.user_exists(user_id):
        db.create_user(user_id)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
    db.reset_requests_if_needed(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if db.get_user_requests(user_id) >= 20 and not db.check_payment(user_id):  # –õ–∏–º–∏—Ç 20 –∑–∞–ø—Ä–æ—Å–æ–≤
        await message.answer(
            "‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.")
        await generate_payment_token(message)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    chat_history = db.get_chat_history(user_id)

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    if not chat_history:
        chat_history.append({"role": "system", "content": system_prompt})

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_history.append({"role": "user", "content": message.text})

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_model = db.get_selected_model(user_id)

    try:
        await message.answer("‚è≥ –î—É–º–∞—é...")
        logger.info(f"–ë–æ—Ç –¥—É–º–∞–µ—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –º–æ–¥–µ–ª—å—é {selected_model}.")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
        if len(chat_history) > 10:  # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –±–æ–ª—å—à–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
            limited_history = [chat_history[0]] + chat_history[-9:]
        else:
            limited_history = chat_history

        reply = await chat_with_model(limited_history, selected_model)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not reply or reply.strip() == "":
            reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."

        await message.answer(reply)
        logger.info(f"–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {reply}")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history.append({"role": "assistant", "content": reply})
        db.update_chat_history(user_id, chat_history)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        db.increment_user_requests(user_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
async def generate_payment_token(message: Message):
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:", reply_markup=types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="Stripe")],
            [types.KeyboardButton(text="PayPal")],
            [types.KeyboardButton(text="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (NowPayments)")]
        ],
        resize_keyboard=True
    ))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(lambda message: message.text == "/start")
async def cmd_start(message: Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if not db.user_exists(user_id):
        db.create_user(user_id)

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –Ω–∞ –±–∞–∑–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π. "
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç–∞. "
        "\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /model"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /model
@dp.message(lambda message: message.text == "/model")
async def cmd_model(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –º–æ–¥–µ–ª—å:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="Llama 2")],
                [types.KeyboardButton(text="Mistral")],
                [types.KeyboardButton(text="Hugging Face")],
                [types.KeyboardButton(text="Gemini")]
            ],
            resize_keyboard=True
        )
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
@dp.message(lambda message: message.text in ["Llama 2", "Mistral", "Hugging Face", "Gemini"])
async def handle_model_selection(message: Message):
    user_id = message.from_user.id
    model_name = message.text.lower()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ id –º–æ–¥–µ–ª–∏
    model_id = "llama"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if model_name == "llama 2":
        model_id = "llama"
    elif model_name == "mistral":
        model_id = "mistral"
    elif model_name == "hugging face":
        model_id = "huggingface"
    elif model_name == "gemini":
        model_id = "gemini"

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.update_selected_model(user_id, model_id)

    await message.answer(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: {message.text}",
        reply_markup=types.ReplyKeyboardRemove()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
@dp.message(lambda message: message.text in ["Stripe", "PayPal", "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (NowPayments)"])
async def handle_payment_method(message: Message):
    user_id = message.from_user.id
    method = message.text

    if method == "Stripe":
        client_secret = create_payment_intent()
        if client_secret:
            await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ QR –∫–æ–¥ –¥–ª—è {client_secret}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
    elif method == "PayPal":
        payment_url = create_paypal_payment()
        if payment_url:
            await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É: {payment_url}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ PayPal.")
    elif method == "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (NowPayments)":
        invoice_url = create_nowpayments_invoice()
        if invoice_url:
            await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É: {invoice_url}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å NowPayments.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(lambda message: message.text == "/help")
async def cmd_help(message: Message):
    await message.answer(
        "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/model - –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å AI\n"
        "/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ 20 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å. "
        "–î–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
@dp.message(lambda message: message.text == "/clear")
async def cmd_clear(message: Message):
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    new_history = [{"role": "system", "content": system_prompt}]
    db.update_chat_history(user_id, new_history)

    await message.answer("üßπ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç
    if not message.text:
        await message.answer("–Ø –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    if message.text.startswith("/"):
        await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        return

    await chat_with_ai(message)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())