
import openai
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message

# üîπ –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ –∫–ª—é—á–∏
API_TOKEN = ""
OPENAI_API_KEY = ""


# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ OpenAI –∫–ª–∏–µ–Ω—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
client = openai.Client(api_key=OPENAI_API_KEY)  # –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç OpenAI

async def chat_with_gpt(message: Message):
    try:
        await message.answer("‚è≥ –î—É–º–∞—é...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å

        # –ù–æ–≤—ã–π –≤—ã–∑–æ–≤ OpenAI API
        response = client.chat.completions.create(
            model="gpt-4-turbo",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "gpt-3.5-turbo"
            messages=[{"role": "user", "content": message.text}]
        )

        reply = response.choices[0].message.content
        await message.answer(reply)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    await chat_with_gpt(message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
