import openai
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message
import requests
import json
from datetime import datetime

# üîπ –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ –∫–ª—é—á–∏
API_TOKEN =
OPENAI_API_KEY =
NOWPAYMENTS_API_KEY =




# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ OpenAI
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
client = openai.Client(api_key=OPENAI_API_KEY)

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def check_payment(invoice_id):
    url = f'https://api.nowpayments.io/v1/invoice/{invoice_id}'
    headers = {'Authorization': f'Bearer {NOWPAYMENTS_API_KEY}'}
    response = requests.get(url, headers=headers)
    data = response.json()

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "paid" ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
    return data['status'] == 'paid'

# üîπ –ß–∞—Ç —Å GPT
async def chat_with_gpt(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not check_payment(user_id):  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await message.answer("‚ö† –í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É.")
        return

    try:
        await message.answer("‚è≥ –î—É–º–∞—é...")
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[{"role": "user", "content": message.text}]
        )
        reply = response.choices[0].message.content
        await message.answer(reply)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    await chat_with_gpt(message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

