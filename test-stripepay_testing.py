import openai
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
import stripe
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import sqlite3
import json
import logging
from cryptography.fernet import Fernet  # –î–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
import requests  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å API PayPal –∏ NowPayments

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('API_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
ENCRYPTION_KEY = os.getenv('ENCRYPTION_KEY')  # –ö–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
PAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')
PAYPAL_SECRET = os.getenv('PAYPAL_SECRET')
NOWPAYMENTS_API_KEY = os.getenv('NOWPAYMENTS_API_KEY')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stripe
stripe.api_key = STRIPE_SECRET_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ OpenAI
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = openai.Client(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
cipher_suite = Fernet(ENCRYPTION_KEY.encode())

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
system_prompt = """
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. 
1. –î–∞–≤–∞–π –ø—Ä–∏–º–µ—Ä—ã, —Ä–∞–∑–±–æ—Ä—ã, –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.  
2. –û—Ñ–æ—Ä–º–ª—è–π –æ—Ç–≤–µ—Ç –ª–æ–≥–∏—á–Ω–æ: —Å–ø–∏—Å–∫–∏, –∞–±–∑–∞—Ü—ã, –∑–∞–≥–æ–ª–æ–≤–∫–∏.  
3. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ üòä, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –∂–∏–≤—ã–º –∏ –Ω–∞–≥–ª—è–¥–Ω—ã–º.  
4. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ª–æ–≥–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤—å –µ—ë –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É—è Markdown-—Ñ–æ—Ä–º–∞—Ç. üìä  
5. –£–ø–æ–º–∏–Ω–∞–π –≤–∞–∂–Ω—ã–µ –Ω—é–∞–Ω—Å—ã –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏.  
6. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ —Ñ–∞–∫—Ç—ã.  
7. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.  
"""




# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class UserDatabase:
    def __init__(self, db_name='users.db'):
        self.db_name = db_name
        self.create_db()

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
    def create_db(self):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY, 
                    requests INTEGER, 
                    paid BOOLEAN,
                    chat_history TEXT,  -- –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
                    last_request_time TEXT  -- –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                )
            ''')
            conn.commit()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")

    # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    def encrypt_data(self, data):
        return cipher_suite.encrypt(data.encode()).decode()

    # –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    def decrypt_data(self, data):
        return cipher_suite.decrypt(data.encode()).decode()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    def user_exists(self, user_id):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT 1 FROM users WHERE user_id = ?', (user_id,))
            return cursor.fetchone() is not None

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    def create_user(self, user_id):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('INSERT INTO users (user_id, requests, paid, chat_history, last_request_time) VALUES (?, ?, ?, ?, ?)',
                           (user_id, 0, False, self.encrypt_data(json.dumps([])), datetime.now().isoformat()))
            conn.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–Ω.")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def get_user_requests(self, user_id):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT requests FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return result[0] if result else 0

    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def increment_user_requests(self, user_id):
        requests = self.get_user_requests(user_id) + 1
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET requests = ?, last_request_time = ? WHERE user_id = ?',
                           (requests, datetime.now().isoformat(), user_id))
            conn.commit()
            logger.info(f"–ó–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–≤–µ–ª–∏—á–µ–Ω—ã –¥–æ {requests}.")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
    def check_payment(self, user_id):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT paid FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return result[0] if result else False

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
    def update_payment_status(self, user_id, paid):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET paid = ? WHERE user_id = ?', (paid, user_id))
            conn.commit()
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {paid}.")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def get_chat_history(self, user_id):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT chat_history FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            if result:
                return json.loads(self.decrypt_data(result[0]))
            return []

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def update_chat_history(self, user_id, chat_history):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET chat_history = ? WHERE user_id = ?',
                           (self.encrypt_data(json.dumps(chat_history)), user_id))
            conn.commit()
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    def get_last_request_time(self, user_id):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT last_request_time FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return datetime.fromisoformat(result[0]) if result else datetime.now()

    # –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
    def reset_requests_if_needed(self, user_id):
        last_request_time = self.get_last_request_time(user_id)
        if datetime.now() - last_request_time > timedelta(days=1):
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE users SET requests = 0 WHERE user_id = ?', (user_id,))
                conn.commit()
                logger.info(f"–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω.")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = UserDatabase()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Apple Pay/Google Pay
def create_payment_intent():
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        intent = stripe.PaymentIntent.create(
            amount=1000,  # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ü–µ–Ω—Ç–∞—Ö, 1000 = $10
            currency="usd",
            payment_method_types=["card", "apple_pay", "google_pay"],
        )
        logger.info("–ü–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω.")
        return intent.client_secret
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        return None

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ PayPal
def create_paypal_payment():
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ PayPal
        auth_response = requests.post(
            "https://api.paypal.com/v1/oauth2/token",
            headers={"Accept": "application/json", "Accept-Language": "en_US"},
            auth=(PAYPAL_CLIENT_ID, PAYPAL_SECRET),
            data={"grant_type": "client_credentials"}
        )
        access_token = auth_response.json()["access_token"]

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_response = requests.post(
            "https://api.paypal.com/v1/payments/payment",
            headers={
                "Content-Type": "application/json",
                "Authorization": f"Bearer {access_token}"
            },
            json={
                "intent": "sale",
                "payer": {"payment_method": "paypal"},
                "transactions": [{
                    "amount": {"total": "10.00", "currency": "USD"},
                    "description": "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"
                }],
                "redirect_urls": {
                    "return_url": "https://example.com/success",
                    "cancel_url": "https://example.com/cancel"
                }
            }
        )
        return payment_response.json()["links"][1]["href"]  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ PayPal: {str(e)}")
        return None

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ NowPayments (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞)
def create_nowpayments_invoice():
    try:
        response = requests.post(
            "https://api.nowpayments.io/v1/invoice",
            headers={"x-api-key": NOWPAYMENTS_API_KEY},
            json={
                "price_amount": 10,
                "price_currency": "usd",
                "order_id": "subscription_123",
                "order_description": "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
                "ipn_callback_url": "https://example.com/callback",
                "success_url": "https://example.com/success",
                "cancel_url": "https://example.com/cancel"
            }
        )
        return response.json()["invoice_url"]  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ NowPayments: {str(e)}")
        return None

# –ß–∞—Ç —Å GPT
async def chat_with_gpt(message: Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª: {message.text}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if not db.user_exists(user_id):
        db.create_user(user_id)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
    db.reset_requests_if_needed(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if db.get_user_requests(user_id) >= 20:  # –õ–∏–º–∏—Ç 20 –∑–∞–ø—Ä–æ—Å–æ–≤
        await message.answer("‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.")
        await generate_payment_token(message)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    chat_history = db.get_chat_history(user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_history.append({"role": "user", "content": message.text})

    try:
        await message.answer("‚è≥ –î—É–º–∞—é...")
        logger.info(f"–ë–æ—Ç –¥—É–º–∞–µ—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        response = client.chat.completions.create(
            model="gpt-4-turbo",  # –ë–æ–ª–µ–µ –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å
            messages=[{"role": "system", "content": system_prompt}, *chat_history],
            temperature=0.7,  # –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
            max_tokens=1024,  # –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞
            top_p=0.9,  # –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å—é –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é
            frequency_penalty=0.3,  # –ú–µ–Ω—å—à–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            presence_penalty=0.6  # –ë–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        )
        reply = response.choices[0].message.content
        await message.answer(reply)
        logger.info(f"–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {reply}")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç GPT –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history.append({"role": "assistant", "content": reply})
        db.update_chat_history(user_id, chat_history)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        db.increment_user_requests(user_id)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
async def generate_payment_token(message: Message):
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:", reply_markup=types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="Stripe")],
            [types.KeyboardButton(text="PayPal")],
            [types.KeyboardButton(text="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (NowPayments)")]
        ],
        resize_keyboard=True
    ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
@dp.message(lambda message: message.text in ["Stripe", "PayPal", "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (NowPayments)"])
async def handle_payment_method(message: Message):
    user_id = message.from_user.id
    method = message.text

    if method == "Stripe":
        client_secret = create_payment_intent()
        if client_secret:
            await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ QR –∫–æ–¥ –¥–ª—è {client_secret}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
    elif method == "PayPal":
        payment_url = create_paypal_payment()
        if payment_url:
            await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É: {payment_url}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ PayPal.")
    elif method == "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (NowPayments)":
        invoice_url = create_nowpayments_invoice()
        if invoice_url:
            await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É: {invoice_url}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å NowPayments.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    await chat_with_gpt(message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())